package com.hunter.base.dao;import com.hunter.common.constant.OrmEnum;import org.springframework.beans.factory.annotation.Autowired;import javax.annotation.PostConstruct;import java.util.List;import java.util.Map;/** * @Author zhangcl * @Date 16/7/4  下午10:15 */public abstract class BaseDao<T> implements IBaseDao<T> {    @Autowired    protected MybatisBaseDao<T> mybatisBaseDao;    @Autowired    protected JdbcBaseDao<T> jdbcBaseDao;    /**     * dao代理     */    private IBaseDao<T> baseDaoProxy;    public long countBySql(String sql, Map param) {        return baseDaoProxy.countBySql(sql, param);    }    @PostConstruct    protected void afterSetProperties() {        switch (getOrmEnum()) {            case mybatis:                mybatisBaseDao.setNameSpace(this.getClass().getName());                this.baseDaoProxy = mybatisBaseDao;                break;        }    }    private OrmEnum getOrmEnum() {        return OrmEnum.mybatis;    }    @Override    public int insertOne(T entity) {        return baseDaoProxy.insertOne(entity);    }    @Override    public void insertList(List<T> list){        baseDaoProxy.insertList(list);    }    @Override    public T findOneById(long id) {        return baseDaoProxy.findOneById(id);    }    @Override    public T findOneBySql(String sql, Map<String, Object> param) {        return baseDaoProxy.findOneBySql(sql, param);    }    @Override    public List<T> findListBySql(String sql, Map<String, Object> param) {        return baseDaoProxy.findListBySql(sql, param);    }    @Override    public List<T> findListBySql(String sql) {        return baseDaoProxy.findListBySql(sql);    }    @Override    public int updateBySql(String sql, Map<String, Object> param) {        return baseDaoProxy.updateBySql(sql, param);    }    @Override    public void updateByEntity(T entity){baseDaoProxy.updateByEntity(entity);}    @Override    public int deleteById(long id) {        return baseDaoProxy.deleteById(id);    }    @Override    public int deleteByIds(List<Long> ids) {        return baseDaoProxy.deleteByIds(ids);    }    @Override    public int deleteBySql(String sql, Map<String, Object> param) {        return baseDaoProxy.deleteBySql(sql, param);    }}