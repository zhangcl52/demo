package com.hunter.base.dao;import com.google.common.collect.Lists;import com.google.common.collect.Maps;import com.hunter.base.constant.SymbolConstant;import org.mybatis.spring.SqlSessionTemplate;import java.util.List;import java.util.Map;/** * @Author zhangcl * @Date 16/7/4  下午10:51 */public class MybatisBaseDao<T> implements IBaseDao {    private String nameSpace;    /**     * 暂不支持一主多从     */    private SqlSessionTemplate masterSqlSessionTemplate;    private SqlSessionTemplate slaveSqlSessionTemplate;    private static String SELECT_BY_ID = "selectById";    public MybatisBaseDao() {    }    public void setNameSpace(String nameSpace) {        this.nameSpace = nameSpace;    }    public void setMasterSqlSessionTemplate(SqlSessionTemplate masterSqlSessionTemplate) {        this.masterSqlSessionTemplate = masterSqlSessionTemplate;    }    public void setSlaveSqlSessionTemplate(SqlSessionTemplate slaveSqlSessionTemplate) {        this.slaveSqlSessionTemplate = slaveSqlSessionTemplate;    }    //    private SqlSessionTemplate chooseDataSource() {//        if (TransactionContext.isInTransaction()) {//            return this.masterSqlSessionTemplate;//        }//        return this.slaveSqlSessionTemplate;//    }    @Override    public long countBySql(String sqlId, Map param) {        Object object = slaveSqlSessionTemplate.selectOne(getStatement(sqlId), param);        return Long.parseLong(object.toString());    }    @Override    public T findOneById(long id) {        Map<String, Object> param = Maps.newHashMap();        param.put("id", id);        List list = slaveSqlSessionTemplate.selectList(getStatement(SELECT_BY_ID), param);        if (list != null && list.size() > 0) {            return (T) list.get(0);        }        return null;    }    @Override    public Object findOneBySql(String sql, Map param) {        List list = slaveSqlSessionTemplate.selectList(getStatement(sql), param);        if (list != null && list.size() > 0) {            return (T) list.get(0);        }        return null;    }    @Override    public List findListByIds(List ids) {        Map<String, Object> param = Maps.newHashMap();        List list = slaveSqlSessionTemplate.selectList(getStatement(SELECT_BY_ID), param);        if (list != null && list.size() > 0) {        }        return null;    }    @Override    public List findListBySql(String sql, Map param) {        return null;    }    @Override    public int insert(Object entity) {        return 0;    }    @Override    public int updateBySql(String sql, Map param) {        return 0;    }    @Override    public int deleteById(long id) {        return 0;    }    @Override    public int deleteByIds(List ids) {        return 0;    }    @Override    public int deleteBySql(String sql, Map param) {        return 0;    }    /**     * 获得sqlid     *     * @param sqlId     * @return     */    private String getStatement(String sqlId) {        return nameSpace + SymbolConstant.PERIOD + sqlId;    }}