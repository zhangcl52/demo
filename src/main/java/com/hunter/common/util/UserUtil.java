package com.hunter.common.util;import com.hunter.common.constant.SysConstant;import com.hunter.sys.base.entity.SysUser;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.web.context.request.RequestContextHolder;import org.springframework.web.context.request.ServletRequestAttributes;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpSession;import java.lang.reflect.Method;import java.util.Date;/** * @Author zhangcl * @Date 17/5/30  上午9:53 */public class UserUtil {    private static Logger LOGGER = LoggerFactory.getLogger(UserUtil.class);    private UserUtil() {    }    /**     * 获取当前用户     *     * @return     */    public static SysUser getCurrentUser() {        HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();        HttpSession session = request.getSession();        SysUser user;        try {            user = (SysUser) session.getAttribute("user");        } catch (Exception e) {            LOGGER.error("there is no user in session", e);            throw new RuntimeException("there is no user in session");        }        return user;    }    /**     * 获取当前用户账号     *     * @return     */    public static String getCurrentUserName() {        SysUser user = getCurrentUser();        String userAccount = "";        if (user != null) {            userAccount = user.getName();        }        return userAccount;    }    /**     * 给指定属性赋值     * @param object     * @param properties     */    public static void setCommonProperty(Object object, String[] properties) {        if (object == null) {            throw new RuntimeException("param object must not be null");        }        if (properties == null) {            throw new RuntimeException("param properties must not be null");        }        Date now = new Date();        Class className = object.getClass().getSuperclass();        try {            for (String property : properties) {                String methodName = "set" + property.substring(0, 1).toUpperCase() + property.substring(1);                Method method = null;                if (property.equals(SysConstant.CREATETIME) || property.equals(SysConstant.MODIFYTIME)) {                    method=className.getDeclaredMethod(methodName,Date.class);                    method.invoke(object, now);                }                if(property.equals(SysConstant.CREATENAME)||property.equals(SysConstant.MODIFYNAME)){                    method=className.getDeclaredMethod(methodName,String.class);                    method.invoke(object, getCurrentUserName());                }                if(property.equals(SysConstant.ISDEL)){                    method=className.getDeclaredMethod(methodName,int.class);                    method.invoke(object,0);                }            }        }  catch (Exception e) {            LOGGER.error(object.getClass() + "给属性赋值出错", e);            throw new RuntimeException(object.getClass() + "给属性赋值出错",e);        }    }    /**     * 给公共属性赋值     * createName createTime modifyName modifyTime hasDel     *     * @param object     */    public static void setCommonPropertyAll(Object object) {        setCommonProperty(object, SysConstant.COMMONPROPERTIES);    }}